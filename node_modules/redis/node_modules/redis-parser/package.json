{
  "name": "redis-parser",
  "version": "1.3.0",
  "description": "Javascript Redis protocol (RESP) parser",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "posttest": "jshint . && npm run coverage && npm run coverage:check",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover --preserve-comments ./node_modules/mocha/bin/_mocha -- -R spec",
    "coverage:check": "node ./node_modules/istanbul/lib/cli.js check-coverage --branch 100 --statement 100"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NodeRedis/node-redis-parser.git"
  },
  "keywords": [
    "redis",
    "protocol",
    "parser",
    "database",
    "javascript",
    "node",
    "nodejs",
    "resp",
    "hiredis"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "devDependencies": {
    "codeclimate-test-reporter": "^0.1.1",
    "intercept-stdout": "^0.1.2",
    "istanbul": "^0.4.0",
    "jshint": "^2.8.0",
    "mocha": "^2.3.2"
  },
  "optionalDependency": {
    "hiredis": "^0.4.1"
  },
  "author": {
    "name": "Ruben Bridgewater"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/NodeRedis/node-redis-parser/issues"
  },
  "homepage": "https://github.com/NodeRedis/node-redis-parser#readme",
  "directories": {
    "test": "test",
    "lib": "lib"
  },
  "readme": "[![Build Status](https://travis-ci.org/NodeRedis/node-redis-parser.png?branch=master)](https://travis-ci.org/NodeRedis/node-redis-parser)\n[![Code Climate](https://codeclimate.com/github/NodeRedis/node-redis-parser/badges/gpa.svg)](https://codeclimate.com/github/NodeRedis/node-redis-parser)\n[![Test Coverage](https://codeclimate.com/github/NodeRedis/node-redis-parser/badges/coverage.svg)](https://codeclimate.com/github/NodeRedis/node-redis-parser/coverage)\n\n# redis-parser\n\nA high performance redis parser solution built for [node_redis](https://github.com/NodeRedis/node_redis) and [ioredis](https://github.com/ioredis/luin).\n\nGenerally all [RESP](http://redis.io/topics/protocol) data will be properly parsed by the parser.\n\n## Install\n\nInstall with [NPM](https://npmjs.org/):\n\n```\nnpm install redis-parser\n```\n\n## Usage\n\n```js\nvar Parser = require('redis-parser');\n\nnew Parser(options);\n```\n\n### Possible options\n\n* `returnReply`: *function*; mandatory\n* `returnError`: *function*; mandatory\n* `returnFatalError`: *function*; optional, defaults to the returnError function\n* `returnBuffers`: *boolean*; optional, defaults to false\n* `name`: *'javascript'|'hiredis'|'auto'|null*; optional, defaults to hiredis and falls back to the js parser if not available or if the stringNumbers option is choosen. Setting this to 'auto' or null is going to automatically determine what parser is available and chooses that one.\n* `stringNumbers`: *boolean*; optional, defaults to false. This is only available for the javascript parser at the moment!\n\n### Example\n\n```js\nvar Parser = require(\"redis-parser\");\n\nfunction Library () {}\n\nLibrary.prototype.returnReply = function (reply) { ... }\nLibrary.prototype.returnError = function (err) { ... }\nLibrary.prototype.returnFatalError = function (err) { ... }\n\nvar lib = new Library();\n\nvar parser = new Parser({\n    returnReply: function(reply) {\n        lib.returnReply(reply);\n    },\n    returnError: function(err) {\n        lib.returnError(err);\n    },\n    returnFatalError: function (err) {\n        lib.returnFatalError(err);\n    },\n    name: 'auto' // This returns either the hiredis or the js parser instance depending on what's available\n});\n\nLibrary.prototype.streamHandler = function () {\n    this.stream.on('data', function (buffer) {\n        // Here the data (e.g. `new Buffer('$5\\r\\nHello\\r\\n'`)) is passed to the parser and the result is passed to either function depending on the provided data.\n        parser.execute(buffer);\n    });\n};\n```\nYou do not have to use the returnFatalError function. Fatal errors will be returned in the normal error function in that case.\n\nAnd if you want to return buffers instead of strings, you can do this by adding the `returnBuffers` option.\n\nIf you handle big numbers, you should pass the `stringNumbers` option. That case numbers above 2^53 can be handled properly without reduced precision.\n\n```js\n// Same functions as in the first example\n\nvar parser = new Parser({\n    returnReply: function(reply) {\n        lib.returnReply(reply);\n    },\n    returnError: function(err) {\n        lib.returnError(err);\n    },\n    name: 'javascript', // Use the Javascript parser\n    stringNumbers: true, // Return all numbers as string instead of a js number\n    returnBuffers: true // All strings are returned as buffer e.g. <Buffer 48 65 6c 6c 6f>\n});\n\n// The streamHandler as above\n```\n\n## Further info\n\nThe [hiredis](https://github.com/redis/hiredis) parser is still the fasted parser for\nNode.js and therefor used as default in redis-parser if the hiredis parser is available.\n\nOtherwise the pure js NodeRedis parser is choosen that is almost as fast as the\nhiredis parser besides some situations in which it'll be a bit slower.\n\n## Protocol errors\n\nTo handle protocol errors (this is very unlikely to happen) gracefuly you should add the returnFatalError option, reject any still running command (they might have been processed properly but the reply is just wrong), destroy the socket and reconnect.\nOtherwise a chunk might still contain partial data of a following command that was already processed properly but answered in the same chunk as the command that resulted in the protocol error.\n\n## Contribute\n\nThe js parser is already optimized but there are likely further optimizations possible.\nBesides running the tests you'll also have to run the change at least against the node_redis benchmark suite and post the improvement in the PR.\nIf you want to write a own parser benchmark, that would also be great!\n\n```\nnpm install\nnpm test\n\n# Run node_redis benchmark (let's guess you cloned node_redis in another folder)\ncd ../redis\nnpm install\nnpm run benchmark parser=javascript > old.log\n# Replace the changed parser in the node_modules\nnpm run benchmark parser=javascript > new.log\nnode benchmarks/diff_multi_bench_output.js old.log new.log > improvement.log\n```\n\n## License\n\n[MIT](./LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "redis-parser@1.3.0",
  "dist": {
    "shasum": "d0dcbd81ac4dc06b814123c07dd0258b0c3b64d9"
  },
  "_from": "redis-parser@^1.3.0",
  "_resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-1.3.0.tgz"
}
