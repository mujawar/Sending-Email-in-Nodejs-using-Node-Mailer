{
  "name": "weak-map",
  "version": "1.0.5",
  "description": "A WeakMap shim for Node.js and browsers",
  "main": "weak-map.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/drses/weak-map.git"
  },
  "keywords": [
    "weakmap",
    "weak-map",
    "weak",
    "map",
    "collections",
    "es6"
  ],
  "author": {
    "name": "Mark Miller",
    "email": "erights@gmail.com"
  },
  "maintainer": "Kris Kowal <kris@cixar.com>",
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/drses/weak-map/issues"
  },
  "files": [
    "weak-map.js"
  ],
  "scripts": {
    "test": "npm run test:native; npm run test:shim",
    "test:phantom": "",
    "test:shim": "node test/index.js",
    "test:native": "node --harmony_collections test/index.js"
  },
  "devDependencies": {
    "jasminum": "^2.0.1"
  },
  "readme": "\n`WeakMap` is a collection slated to be introduced to JavaScript with\nEcmaScript 6.  It provides a mapping from objects to values, but allows\nany entry to be garbage collected if the key is provably lost.\n\nIn order for it to be possible that a key is provably lost, weak maps do\nnot provide a way to access the key list.\n\nThis is a Node Packaged Module (NPM) that provides a shim and patcher\nfor missing or broken WeakMap implementations suitable for use in\nNode.js and browsers that provide the EcmaScript 5 property description\ninterfaces provided that it hosted by a CommonJS loader or bundler like\n[Browserify][], [Montage][], [Mr][], or [Mop][].\n\n[Browserify]: https://github.com/substack/node-browserify\n[Montage]: https://github.com/montagejs/mr\n[Mr]: https://github.com/montagejs/mr\n[Mop]: https://github.com/montagejs/mop\n\n```\nnpm install weak-map --save\n```\n\n```javascript\nvar WeakMap = require(\"weak-map\");\nvar map = new WeakMap();\nvar key = {};\nmap.set(key, \"Hello, World!\");\nmap.get(key) === \"Hello, World!\";\nkey = null;\n// \"Hello, World!\" may be collected\n```\n\nSee [MDN][] for the API details.\n\n[MDN]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\nAt time of writing, prototype implementations of `WeakMap` exist in V8\nand Spidermonkey.  The prototype is available in Node.js v0.10 with the\n`--harmony_collections` V8 option.  In v0.8, it was available with\n`--harmony_weakmaps`.  The purpose of this package is to enable\ndependees to use weak maps regardless of whether they are implemented by\nthe underlying engine, albeit in a way that leaks memory in some\nnon-obvious cases.\n\n### Purpose and limitation\n\nThis shim depends on and modifies ECMAScript 5 property descriptor related\nmethods, `Object.defineProperty`, `Object.getOwnPropertyNames`,\n`Object.isExtensible`, `Object.freeze`, and `Object.seal`.\n\nIn a nutshell, the WeakMap shim emulates a WeakMap by adding a hidden\nproperty to the key that associates the weak map with the retained\nobject. The shim overrides the ECMAScript 5 methods to cover its tracks.\n\nConsider a scenario that only includes a weak map, a key, and a corresponding\nvalue through the weak map. With a proper `WeakMap`, built into the JavaScript\nengine privy to the internals of the garbage collector, the `value` would be\nretained either by the key or the weak map. If *either* the key or the weak map\nare elligible for garbage collection, the value is elligible.\n\nThis is in contrast to to a plain `Map`. In a scenario with a map, a key, and a\nvalue corresponding to the key through the map, neither the key nor the value\nwill be eligible for garbage collection until the map containing them is\nelligible. Thus, if a map is used to establish a relationship between ephemeral\nkeys and values, it will accumulate garbage.\n\nThis shim does its best to approximate a proper `WeakMap` without an intimate\nrelationship with the garbage collector. In the same scenario, the value will\nbecome elligible for garbage collection if the key is elligible. Unlike a proper\nweak map, if the weak map shim becomes elligible for garbage collection but the\nkey is retained by something else, the value will be retained. In this scenario,\nall operations of the weak map take constant time.\n\nHowever, if the key is *frozen*, the weak map retains both the key and the value\nand neither are elligible for collection until the weak map becomes elligible\nitself. This scenario is unfortunately identical to the behavior of a `Map`.\nAdditionally, all operations of the weak map suffer linear time.\n\nAs stated by Mark Miller in the code:\n\n> As with true WeakMaps, in this emulation, a key does not retain maps indexed by\n> that key and (crucially) a map does not retain the keys it indexes. A map by\n> itself also does not retain the values associated with that map.\n>\n> However, the values associated with a key in some map are retained so long as\n> that key is retained and those associations are not overridden. For example,\n> when used to support membranes, all values exported from a given membrane will\n> live for the lifetime they would have had in the absence of an interposed\n> membrane. Even when the membrane is revoked, all objects that would have been\n> reachable in the absence of revocation will still be reachable, as far as the\n> GC can tell, even though they will no longer be relevant to ongoing\n> computation.\n>\n> The API implemented here is approximately the API as implemented\n> in FF6.0a1 and agreed to by MarkM, Andreas Gal, and Dave Herman,\n> rather than the offially approved proposal page.\n>\n> The first difference between the emulation here and that in FF6.0a1 is the\n> presence of non enumerable `get___`, `has___`, `set___`, and `delete___`}\n> methods on WeakMap instances to represent what would be the hidden internal\n> properties of a primitive implementation. Whereas the FF6.0a1 WeakMap.prototype\n> methods require their `this` to be a genuine WeakMap instance (i.e., an object\n> of `[[Class]]` \"WeakMap}), since there is nothing unforgeable about the\n> pseudo-internal method names used here, nothing prevents these emulated\n> prototype methods from being applied to non-WeakMaps with pseudo-internal\n> methods of the same names.\n>\n> Another difference is that our emulated `WeakMap.prototype` is not itself a\n> WeakMap. A problem with the current FF6.0a1 API is that WeakMap.prototype is\n> itself a WeakMap providing ambient mutability and an ambient communications\n> channel. Thus, if a WeakMap is already present and has this problem,\n> repairES5.js wraps it in a safe wrappper in order to prevent access to this\n> channel. (See PATCH_MUTABLE_FROZEN_WEAKMAP_PROTO in repairES5.js).\n\nThis refers to `repairES5.js` as provided by Google Caja.\n\n### Origin and license\n\nThe canonical implementation of `WeakMap` exists in the Google Caja\nSubversion repository at http://google-caja.googlecode.com/svn/trunk.\nIt was written by Mark S. Miller.  It is released by Google with the\nApache 2.0 license.  This package is maintained by Kris Kowal.\n\nThis work began with [Mark Miller’s proposal][Proposal] for `WeakMap` to ECMA’s\nTC-39, where the JavaScript standard is developed.\n\n[Proposal]: http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps\n\n",
  "readmeFilename": "README.md",
  "_id": "weak-map@1.0.5",
  "dist": {
    "shasum": "7d5ddec100007544a5cc593150894041a8d82f2b"
  },
  "_from": "weak-map@~1.0.x",
  "_resolved": "https://registry.npmjs.org/weak-map/-/weak-map-1.0.5.tgz"
}
